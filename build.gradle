// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.71'
    ext.android_plugin_version = '3.2.0'
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$android_plugin_version"
        //noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.0.2'
        classpath 'io.fabric.tools:gradle:1.25.4'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    ext {
        gitSha = { ->
            try {
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-parse', '--short', 'HEAD'
                    standardOutput = stdout
                }
                return stdout.toString().trim()
            } catch (ignored) {
                return null
            }
        }

        // keystore property
        Properties localProps = new Properties()
        if (file('../local.properties').exists()) {
            localProps.load(new FileInputStream(file('../local.properties')))
        }

        keyPropsDebug = new Properties()
        if (localProps['keystore-debug.props.file'] != null) {
            keyPropsDebug.load(new FileInputStream(file(localProps['keystore-debug.props.file'])))
        }

        keyPropsRelease = new Properties()
        if (localProps['keystore-release.props.file'] != null) {
            keyPropsRelease.load(new FileInputStream(file(localProps['keystore-release.props.file'])))
        }

        appProps = new Properties()
        if (localProps['app.props.file'] != null) {
            appProps.load(new FileInputStream(file(localProps['app.props.file'])))
        }

        versionMajor = 1
        versionMinor = 2
        versionPatch = 0
        versionBuild = 0 // bump for dogfood builds, public betas, etc.

        targetSdk = 28
        compileSdk = 28
        minSdk = 25
        buildTools = "28.0.2"
        daggerVersion = '2.17'
        rxJavaVersion = '2.2.2'
        rxAndroidVersion = '2.1.0'
    }

    project.configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                // Force all of the primary support libraries to use the same version.
                if (details.requested.group == 'com.android.support') {
                    if (details.requested.name != 'multidex') {
                        details.useVersion commonSupportLibraryVersion
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    group 'build'
    delete rootProject.buildDir
}
